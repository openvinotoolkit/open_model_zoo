# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_impl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_impl')
    _impl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_impl', [dirname(__file__)])
        except ImportError:
            import _impl
            return _impl
        try:
            _mod = imp.load_module('_impl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _impl = swig_import_helper()
    del swig_import_helper
else:
    import _impl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _impl.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _impl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _impl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _impl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _impl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _impl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _impl.SwigPyIterator_copy(self)

    def next(self):
        return _impl.SwigPyIterator_next(self)

    def __next__(self):
        return _impl.SwigPyIterator___next__(self)

    def previous(self):
        return _impl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _impl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _impl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _impl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _impl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _impl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _impl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _impl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _impl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _impl.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _impl.IntVector___nonzero__(self)

    def __bool__(self):
        return _impl.IntVector___bool__(self)

    def __len__(self):
        return _impl.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _impl.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _impl.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _impl.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _impl.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _impl.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _impl.IntVector___setitem__(self, *args)

    def pop(self):
        return _impl.IntVector_pop(self)

    def append(self, x):
        return _impl.IntVector_append(self, x)

    def empty(self):
        return _impl.IntVector_empty(self)

    def size(self):
        return _impl.IntVector_size(self)

    def swap(self, v):
        return _impl.IntVector_swap(self, v)

    def begin(self):
        return _impl.IntVector_begin(self)

    def end(self):
        return _impl.IntVector_end(self)

    def rbegin(self):
        return _impl.IntVector_rbegin(self)

    def rend(self):
        return _impl.IntVector_rend(self)

    def clear(self):
        return _impl.IntVector_clear(self)

    def get_allocator(self):
        return _impl.IntVector_get_allocator(self)

    def pop_back(self):
        return _impl.IntVector_pop_back(self)

    def erase(self, *args):
        return _impl.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _impl.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _impl.IntVector_push_back(self, x)

    def front(self):
        return _impl.IntVector_front(self)

    def back(self):
        return _impl.IntVector_back(self)

    def assign(self, n, x):
        return _impl.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _impl.IntVector_resize(self, *args)

    def insert(self, *args):
        return _impl.IntVector_insert(self, *args)

    def reserve(self, n):
        return _impl.IntVector_reserve(self, n)

    def capacity(self):
        return _impl.IntVector_capacity(self)
    __swig_destroy__ = _impl.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _impl.IntVector_swigregister
IntVector_swigregister(IntVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _impl.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _impl.StringVector___nonzero__(self)

    def __bool__(self):
        return _impl.StringVector___bool__(self)

    def __len__(self):
        return _impl.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _impl.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _impl.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _impl.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _impl.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _impl.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _impl.StringVector___setitem__(self, *args)

    def pop(self):
        return _impl.StringVector_pop(self)

    def append(self, x):
        return _impl.StringVector_append(self, x)

    def empty(self):
        return _impl.StringVector_empty(self)

    def size(self):
        return _impl.StringVector_size(self)

    def swap(self, v):
        return _impl.StringVector_swap(self, v)

    def begin(self):
        return _impl.StringVector_begin(self)

    def end(self):
        return _impl.StringVector_end(self)

    def rbegin(self):
        return _impl.StringVector_rbegin(self)

    def rend(self):
        return _impl.StringVector_rend(self)

    def clear(self):
        return _impl.StringVector_clear(self)

    def get_allocator(self):
        return _impl.StringVector_get_allocator(self)

    def pop_back(self):
        return _impl.StringVector_pop_back(self)

    def erase(self, *args):
        return _impl.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _impl.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _impl.StringVector_push_back(self, x)

    def front(self):
        return _impl.StringVector_front(self)

    def back(self):
        return _impl.StringVector_back(self)

    def assign(self, n, x):
        return _impl.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _impl.StringVector_resize(self, *args)

    def insert(self, *args):
        return _impl.StringVector_insert(self, *args)

    def reserve(self, n):
        return _impl.StringVector_reserve(self, n)

    def capacity(self):
        return _impl.StringVector_capacity(self)
    __swig_destroy__ = _impl.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _impl.StringVector_swigregister
StringVector_swigregister(StringVector)

class ScorerBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScorerBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScorerBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _impl.delete_ScorerBase
    __del__ = lambda self: None

    def get_log_cond_prob(self, words):
        return _impl.ScorerBase_get_log_cond_prob(self, words)

    def get_sent_log_prob(self, words):
        return _impl.ScorerBase_get_sent_log_prob(self, words)

    def get_max_order(self):
        return _impl.ScorerBase_get_max_order(self)

    def get_dict_size(self):
        return _impl.ScorerBase_get_dict_size(self)

    def is_character_based(self):
        return _impl.ScorerBase_is_character_based(self)

    def reset_params(self, alpha, beta):
        return _impl.ScorerBase_reset_params(self, alpha, beta)

    def make_ngram(self, prefix):
        return _impl.ScorerBase_make_ngram(self, prefix)

    def split_labels(self, labels):
        return _impl.ScorerBase_split_labels(self, labels)
    __swig_setmethods__["alpha"] = _impl.ScorerBase_alpha_set
    __swig_getmethods__["alpha"] = _impl.ScorerBase_alpha_get
    if _newclass:
        alpha = _swig_property(_impl.ScorerBase_alpha_get, _impl.ScorerBase_alpha_set)
    __swig_setmethods__["beta"] = _impl.ScorerBase_beta_set
    __swig_getmethods__["beta"] = _impl.ScorerBase_beta_get
    if _newclass:
        beta = _swig_property(_impl.ScorerBase_beta_get, _impl.ScorerBase_beta_set)
ScorerBase_swigregister = _impl.ScorerBase_swigregister
ScorerBase_swigregister(ScorerBase)
cvar = _impl.cvar
OOV_SCORE = cvar.OOV_SCORE
START_TOKEN = cvar.START_TOKEN
UNK_TOKEN = cvar.UNK_TOKEN
END_TOKEN = cvar.END_TOKEN

class ScorerYoklm(ScorerBase):
    __swig_setmethods__ = {}
    for _s in [ScorerBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScorerYoklm, name, value)
    __swig_getmethods__ = {}
    for _s in [ScorerBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScorerYoklm, name)
    __repr__ = _swig_repr

    def __init__(self, alpha, beta, lm_path, vocabulary):
        this = _impl.new_ScorerYoklm(alpha, beta, lm_path, vocabulary)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _impl.delete_ScorerYoklm
    __del__ = lambda self: None

    def get_log_cond_prob(self, words):
        return _impl.ScorerYoklm_get_log_cond_prob(self, words)
ScorerYoklm_swigregister = _impl.ScorerYoklm_swigregister
ScorerYoklm_swigregister(ScorerYoklm)


def numpy_beam_decode(probs, seq_lens, labels, beam_size, num_processes, cutoff_prob, cutoff_top_n, blank_id, log_input, scorer):
    return _impl.numpy_beam_decode(probs, seq_lens, labels, beam_size, num_processes, cutoff_prob, cutoff_top_n, blank_id, log_input, scorer)
numpy_beam_decode = _impl.numpy_beam_decode

def numpy_beam_decode_no_lm(probs, seq_lens, labels, beam_size, num_processes, cutoff_prob, cutoff_top_n, blank_id, log_input):
    return _impl.numpy_beam_decode_no_lm(probs, seq_lens, labels, beam_size, num_processes, cutoff_prob, cutoff_top_n, blank_id, log_input)
numpy_beam_decode_no_lm = _impl.numpy_beam_decode_no_lm

def create_scorer_yoklm(alpha, beta, lm_path, labels):
    return _impl.create_scorer_yoklm(alpha, beta, lm_path, labels)
create_scorer_yoklm = _impl.create_scorer_yoklm

def delete_scorer(scorer):
    return _impl.delete_scorer(scorer)
delete_scorer = _impl.delete_scorer

def is_character_based(scorer):
    return _impl.is_character_based(scorer)
is_character_based = _impl.is_character_based

def get_max_order(scorer):
    return _impl.get_max_order(scorer)
get_max_order = _impl.get_max_order

def get_dict_size(scorer):
    return _impl.get_dict_size(scorer)
get_dict_size = _impl.get_dict_size

def reset_params(scorer, alpha, beta):
    return _impl.reset_params(scorer, alpha, beta)
reset_params = _impl.reset_params
# This file is compatible with both classic and new-style classes.


