/*
// Copyright (C) 2021-2022 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
*/

#include <openvino/openvino.hpp>
#include <utils/common.hpp>

#include "models/model_base.h"

std::shared_ptr<ov::Model> ModelBase::prepareModel(ov::runtime::Core& core) {
    // --------------------------- Read IR Generated by ModelOptimizer (.xml and .bin files) ------------
    /** Read network model **/
    std::shared_ptr<ov::Model>  model = core.read_model(modelFileName);
    /** Set batch size to 1 **/
    //setBatchOne(model);

    // -------------------------- Reading all outputs names and customizing I/O blobs (in inherited classes)
    prepareInputsOutputs(model);
    return model;
}

ov::runtime::CompiledModel ModelBase::compileModel(const CnnConfig& cnnConfig, ov::runtime::Core& core) {
    this->cnnConfig = cnnConfig;
    auto model = prepareModel(core);
    compiledModel = core.compile_model(model, cnnConfig.deviceName, cnnConfig.execNetworkConfig);
    logCompiledModelInfo(compiledModel, modelFileName, cnnConfig.deviceName);
    return compiledModel;
}
