/*
// Copyright (C) 2021 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
*/

#include "models/model_base.h"
#include <inference_engine.hpp>
#include <utils/common.hpp>
#include <utils/slog.hpp>

using namespace InferenceEngine;

InferenceEngine::CNNNetwork ModelBase::prepareNetwork(InferenceEngine::Core& core) {
    // --------------------------- Load inference engine ------------------------------------------------
    slog::info << "Loading Inference Engine" << slog::endl;

    slog::info << "Device info: " << slog::endl;
    slog::info << printable(core.GetVersions(cnnConfig.devices));

    /** Load extensions for the plugin **/
    if (!cnnConfig.cpuExtensionsPath.empty()) {
        // CPU(MKLDNN) extensions are loaded as a shared library and passed as a pointer to base extension
        IExtensionPtr extension_ptr = std::make_shared<Extension>(cnnConfig.cpuExtensionsPath);
        core.AddExtension(extension_ptr, "CPU");
    }
    if (!cnnConfig.clKernelsConfigPath.empty()) {
        // clDNN Extensions are loaded from an .xml description and OpenCL kernel files
        core.SetConfig({ {PluginConfigParams::KEY_CONFIG_FILE, cnnConfig.clKernelsConfigPath} }, "GPU");
    }

    // --------------------------- Read IR Generated by ModelOptimizer (.xml and .bin files) ------------
    slog::info << "Loading network files" << slog::endl;
    /** Read network model **/
    InferenceEngine::CNNNetwork cnnNetwork = core.ReadNetwork(modelFileName);
    /** Set batch size to 1 **/
    slog::info << "Batch size is forced to 1." << slog::endl;
    setBatchOne(cnnNetwork);

    // -------------------------- Reading all outputs names and customizing I/O blobs (in inherited classes)
    prepareInputsOutputs(cnnNetwork);
    return cnnNetwork;
}

ExecutableNetwork ModelBase::loadExecutableNetwork(const CnnConfig& cnnConfig, InferenceEngine::Core& core) {
    this->cnnConfig = cnnConfig;
    auto cnnNetwork = prepareNetwork(core);

    slog::info << "Loading model to the device" << slog::endl;
    execNetwork = core.LoadNetwork(cnnNetwork, cnnConfig.devices, cnnConfig.execNetworkConfig);
    return execNetwork;
}
