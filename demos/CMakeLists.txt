# Copyright (C) 2018-2020 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

cmake_minimum_required(VERSION 3.10)

# Multi config generators such as Visual Studio ignore CMAKE_BUILD_TYPE. Multi config generators are configured with
# CMAKE_CONFIGURATION_TYPES, but limiting options in it completely removes such build options
get_property(GENERATOR_IS_MULTI_CONFIG_VAR GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(NOT GENERATOR_IS_MULTI_CONFIG_VAR AND NOT DEFINED CMAKE_BUILD_TYPE)
    message(STATUS "CMAKE_BUILD_TYPE not defined, 'Release' will be used")
    # Setting CMAKE_BUILD_TYPE as CACHE must go before project(). Otherwise project() sets its value and set() doesn't take an effect
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ...")
endif()

project(Demos)

option(ENABLE_PYTHON "Whether to build extension modules for Python demos" OFF)
option(MULTICHANNEL_DEMO_USE_TBB "Use TBB-based threading in multichannel demos" OFF)
option(MULTICHANNEL_DEMO_USE_NATIVE_CAM "Use native camera api in multichannel demos" OFF)

if(NOT BIN_FOLDER)
    string(TOLOWER ${CMAKE_SYSTEM_PROCESSOR} ARCH)
    if(ARCH STREQUAL "x86_64" OR ARCH STREQUAL "amd64") # Windows detects Intel's 64-bit CPU as AMD64
        set(ARCH intel64)
    elseif(ARCH STREQUAL "i386")
        set(ARCH ia32)
    endif()

    set(BIN_FOLDER ${ARCH})
endif()

foreach(artifact IN ITEMS ARCHIVE COMPILE_PDB LIBRARY PDB RUNTIME)
    set("CMAKE_${artifact}_OUTPUT_DIRECTORY" "${CMAKE_CURRENT_BINARY_DIR}/${BIN_FOLDER}/$<CONFIG>")
endforeach()

if(UNIX)
    string(APPEND CMAKE_LIBRARY_OUTPUT_DIRECTORY "/lib")
    string(APPEND CMAKE_ARCHIVE_OUTPUT_DIRECTORY "/lib")
endif()

if(WIN32)
    if(NOT "${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
        message(FATAL_ERROR "Only 64-bit supported on Windows")
    endif()

    add_definitions(-DNOMINMAX)
endif()

if(MSVC)
    add_compile_options(/wd4251 /wd4275 /wd4267  # disable some warnings
                        /W3  # Specify the level of warnings to be generated by the compiler
                        /EHsc)  # Enable standard C++ stack unwinding, assume functions with extern "C" never throw
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "^GNU|(Apple)?Clang$")
    set(COMPILER_IS_GCC_LIKE TRUE)
    add_compile_options(-Wall)
else()
    set(COMPILER_IS_GCC_LIKE FALSE)
endif()

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

function(add_samples_to_build)
    # check each passed sample subdirectory
    foreach(dir ${ARGN})
        if(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${dir})
            # check if a subdirectory contains CMakeLists.txt. In this case we can build it.
            file(GLOB sub_dirs ${CMAKE_CURRENT_SOURCE_DIR}/${dir}/*)
            foreach(sub_dir ${sub_dirs})
                if(EXISTS "${sub_dir}/CMakeLists.txt")
                    # check if specified sample/demo is found.
                    if(BUILD_SAMPLE_NAME)
                        list(FIND BUILD_SAMPLE_NAME ${dir} index)
                    endif()
                    if(index EQUAL -1)
                        message(STATUS "${dir} SKIPPED")
                    else()
                        # Include subdirectory to the project.
                        add_subdirectory(${sub_dir})
                    endif()
                endif()
            endforeach()
        endif()
    endforeach()
endfunction()

include(CMakeParseArguments)

# add_demo(NAME <target name>
#     SOURCES <source files>
#     [HEADERS <header files>]
#     [INCLUDE_DIRECTORIES <include dir>]
#     [DEPENDENCIES <dependencies>])
macro(add_demo)
    set(oneValueArgs NAME)
    set(multiValueArgs SOURCES HEADERS DEPENDENCIES INCLUDE_DIRECTORIES)
    cmake_parse_arguments(IE_SAMPLE "${options}" "${oneValueArgs}"
                          "${multiValueArgs}" ${ARGN})

    # Create named folders for the sources within the .vcproj
    # Empty name lists them directly under the .vcproj
    source_group("src" FILES ${IE_SAMPLE_SOURCES})
    if(IE_SAMPLE_HEADERS)
        source_group("include" FILES ${IE_SAMPLE_HEADERS})
    endif()

    # Create executable file from sources
    add_executable(${IE_SAMPLE_NAME} ${IE_SAMPLE_SOURCES} ${IE_SAMPLE_HEADERS})

    if(WIN32)
        set_target_properties(${IE_SAMPLE_NAME} PROPERTIES COMPILE_PDB_NAME ${IE_SAMPLE_NAME})
    endif()

    if(IE_SAMPLE_INCLUDE_DIRECTORIES)
        target_include_directories(${IE_SAMPLE_NAME} PRIVATE ${IE_SAMPLE_INCLUDE_DIRECTORIES})
    endif()

    target_link_libraries(${IE_SAMPLE_NAME} PRIVATE ${OpenCV_LIBRARIES} ${InferenceEngine_LIBRARIES}
                                                    ${IE_SAMPLE_DEPENDENCIES} ngraph::ngraph utils gflags)

    if(UNIX)
        target_link_libraries(${IE_SAMPLE_NAME} PRIVATE pthread)
    endif()
endmacro()

find_package(OpenCV REQUIRED COMPONENTS core highgui videoio imgproc imgcodecs gapi)
find_package(InferenceEngine REQUIRED)
find_package(ngraph REQUIRED)

add_subdirectory(thirdparty/gflags)
add_subdirectory(common/cpp)
add_subdirectory(multi_channel_common/cpp)

# collect all samples subdirectories
file(GLOB samples_dirs RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *)
# skip building of unnecessary subdirectories
list(REMOVE_ITEM samples_dirs common thirdparty multi_channel_common)
add_samples_to_build(${samples_dirs})

if(ENABLE_PYTHON)
    find_package(PythonInterp 3.6 REQUIRED)
    find_package(PythonLibs "${PYTHON_VERSION_STRING}" EXACT REQUIRED)

    execute_process(
    COMMAND "${PYTHON_EXECUTABLE}" -c "import numpy; print(numpy.get_include())"
    OUTPUT_VARIABLE NUMPY_INCLUDE_DIR
    OUTPUT_STRIP_TRAILING_WHITESPACE
    RESULT_VARIABLE NUMPY_NOT_FOUND)
    if(NUMPY_NOT_FOUND)
        message(FATAL_ERROR "NumPy headers not found")
    endif()

    add_subdirectory(human_pose_estimation_3d_demo/python/pose_extractor)
    add_subdirectory(common/python/monitors_extension)
    add_subdirectory(speech_recognition_deepspeech_demo/python/ctcdecode-numpy)
endif()
